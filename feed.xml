<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://atorigin.github.io/</id><title>Owen</title><subtitle>DevOps SRE Shell Kubernetes CI/CD</subtitle> <updated>2025-04-04T15:18:32+08:00</updated> <author> <name>OwenYang</name> <uri>https://atorigin.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://atorigin.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://atorigin.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2025 OwenYang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>023_探索 Podman 整合 Windows WSL2 的過程</title><link href="https://atorigin.github.io/posts/Podman%E5%AE%89%E8%A3%9D%E5%9C%A8WSL2%E7%9A%84%E5%9D%91/" rel="alternate" type="text/html" title="023_探索 Podman 整合 Windows WSL2 的過程" /><published>2025-04-04T00:00:00+08:00</published> <updated>2025-04-04T15:17:59+08:00</updated> <id>https://atorigin.github.io/posts/Podman%E5%AE%89%E8%A3%9D%E5%9C%A8WSL2%E7%9A%84%E5%9D%91/</id> <content src="https://atorigin.github.io/posts/Podman%E5%AE%89%E8%A3%9D%E5%9C%A8WSL2%E7%9A%84%E5%9D%91/" /> <author> <name>owen</name> </author> <category term="DevOps" /> <summary> 起源 因為自己公司電腦開發環境的 container runtime 從 docker 移轉到 podman 了，所以家裡的桌機也想跟著轉，但公司是 Macbook，家裡桌機是 Windows + WSL2 的架構，因此有些設定差異滿大的，本篇目的在於紀錄一下 Podman 移轉的過程。 參考資料 設定 Podman Socket bind WSL2 的過程 設定 WSL2 完全未安裝 WSL2 和 podman desktop 用 “系統管理員” 開啟 powershell 執行 command 啟用 WSL2 重新啟動電腦 安裝 podman-desktop 按照步驟設定 podman-desktop 打開 powershell 使用 podman command 驗證安裝結果 目前筆者環境已有安裝 WSL2 所以此流程僅留存做... </summary> </entry> <entry><title>022_使用 AWS DMS 來移轉 RDS Aurora MySQL 資料庫進行 VPC Resource 無痛遷移</title><link href="https://atorigin.github.io/posts/%E4%BD%BF%E7%94%A8AWS%E7%9A%84DMS%E7%A7%BB%E8%BD%89AuroraMySQL%E8%B3%87%E6%96%99%E5%BA%AB/" rel="alternate" type="text/html" title="022_使用 AWS DMS 來移轉 RDS Aurora MySQL 資料庫進行 VPC Resource 無痛遷移" /><published>2024-12-24T00:00:00+08:00</published> <updated>2025-04-04T14:56:31+08:00</updated> <id>https://atorigin.github.io/posts/%E4%BD%BF%E7%94%A8AWS%E7%9A%84DMS%E7%A7%BB%E8%BD%89AuroraMySQL%E8%B3%87%E6%96%99%E5%BA%AB/</id> <content src="https://atorigin.github.io/posts/%E4%BD%BF%E7%94%A8AWS%E7%9A%84DMS%E7%A7%BB%E8%BD%89AuroraMySQL%E8%B3%87%E6%96%99%E5%BA%AB/" /> <author> <name>owen</name> </author> <category term="Cloud" /> <summary> 起因 舊有的 AWS 上，VPC 在不同的環境中會有 CIDR Overlay 的問題，為了改善當前架構並因應外部稽核，需要重新設計 VPC 及其網路規劃。 目標 需要轉移現有 VPC 內所有資源 重新規範 VPC 內網路設定，其中包含 NACL、VPC Endpoint、Routing，Logging、Security Group 甚至是 Transit Gateway (多個 VPC Peering) 工具 - AWS DMS DMS Fleet Advisor 可以用來收集 on-prem 資料和分析 server 的資料來構建移轉到 aws 的 inventory 和 schema 如果要 migrate 不同的 db engine 可以使用 DMS Schema Conversion。可以用 AWS 提供的 AWS Schema Conversio... </summary> </entry> <entry><title>023_Github CI/CD</title><link href="https://atorigin.github.io/posts/%E7%8E%A9%E8%BD%89GithubCICD/" rel="alternate" type="text/html" title="023_Github CI/CD" /><published>2024-11-26T00:00:00+08:00</published> <updated>2025-04-04T14:56:31+08:00</updated> <id>https://atorigin.github.io/posts/%E7%8E%A9%E8%BD%89GithubCICD/</id> <content src="https://atorigin.github.io/posts/%E7%8E%A9%E8%BD%89GithubCICD/" /> <author> <name>owen</name> </author> <category term="DevOps" /> <summary> 起因 因為公司 Github Org 的 CICD 日益漸增，加上目前組內討論想要把 CI/CD 的配置都統一管理到 Github Action，因此開始調研如何實作 ARC 有效利用測試區的 EKS 效能 ARC 架構 架構描述 安裝完畢後，AutoScalingRunnerSet Controller 呼叫 githun API 取得這個 runner scale set 屬於哪一個 runner group ID AutoScalingRunnerSet 在建立 Runner ScaleSet Listener 之前，呼叫 Github API 取得 Github Action 服務建立 runner scale set. Runner ScaleSet Listener 由 AutoScalingListener Controller 佈署，Runner ... </summary> </entry> <entry><title>022_2024 KubeSummit</title><link href="https://atorigin.github.io/posts/2024KubeSummit/" rel="alternate" type="text/html" title="022_2024 KubeSummit" /><published>2024-10-23T00:00:00+08:00</published> <updated>2025-04-04T14:56:31+08:00</updated> <id>https://atorigin.github.io/posts/2024KubeSummit/</id> <content src="https://atorigin.github.io/posts/2024KubeSummit/" /> <author> <name>owen</name> </author> <category term="Cloud" /> <summary> 聆聽的議程 Day1 10:00 ~ 10:30 10:50 ~ 11:20 11:40 ~ 12:20 13:20 - 14:00 Day2 9:50 ~ 10:30 10:50 ~ 11:30 11:50 ~ 12:20 13:20 ~ 14:00 1 - 說明 GKE 跟 GKE 與 AI 一起應用的場景 Kubernetes + AI GPU 的寶貴資源可以無通攜帶至任何 Kubernetes 環境 最大化資源利用 GCP Kubernetes 使用 GPU Multi-instance GPUs Multi-Process Service GPU Time-Sharing Containr preload... </summary> </entry> <entry><title>021_玩玩 ECS 的監控機制</title><link href="https://atorigin.github.io/posts/%E7%8E%A9%E7%8E%A9ECS%E7%9A%84%E7%9B%A3%E6%8E%A7%E6%A9%9F%E5%88%B6/" rel="alternate" type="text/html" title="021_玩玩 ECS 的監控機制" /><published>2024-09-24T00:00:00+08:00</published> <updated>2025-04-04T14:56:31+08:00</updated> <id>https://atorigin.github.io/posts/%E7%8E%A9%E7%8E%A9ECS%E7%9A%84%E7%9B%A3%E6%8E%A7%E6%A9%9F%E5%88%B6/</id> <content src="https://atorigin.github.io/posts/%E7%8E%A9%E7%8E%A9ECS%E7%9A%84%E7%9B%A3%E6%8E%A7%E6%A9%9F%E5%88%B6/" /> <author> <name>owen</name> </author> <category term="Cloud" /> <summary> 目標 因為工作需求，需要在 ECS Fargate 上實作 coturn server 並保留原本 auto-scaling 的機制，但礙於原本是用 EC2 服務做的，彈性很大，scaling 參考的 metric 是 networkIn，這讓移轉到 ECS Fargate 的可行性變得稍微複雜 關於 ECS Auto-Scaling 的說明 https://docs.aws.amazon.com/zh_tw/AmazonECS/latest/developerguide/service-auto-scaling.html 支援三種 type 的 auto-scaling https://docs.aws.amazon.com/zh_tw/autoscaling/application/userguide/monitoring-clo... </summary> </entry> </feed>
